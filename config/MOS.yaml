# NORM_TYPE: &norm_type 'IN'

## basic config
BASIC:
  EXP_NAME: 'MOS'
  EXP_RESULT_FOLDER: './exp_results'
  
  USE_GPU: True
  GPU: 0
  
  TRAIN_OR_VAL: 'train'
  MODEL_FILE_PATH: ''
  EPOCHS: 100
  SKIP_WHEN_INSTANCE_MORE_THAN: 8
  USE_COURSE_LEARNING: False


## dataset config
DATASET:
  DATASET_NAME: 'VOC'
  DATASET_ROOT_FOLDER: '/home/guiyan/workspaces/datasets/voc2012'
  NUM_WORKERS: 0
  PIN_MEMORY: False
  BATCH_SIZE: 1 # only use 1, more than 1 will be out of memory, and the number of objects is not the same in same image.
  TRAIN_TRANSFORM: 
    - ['RandomHorizontalFlip', 0.5] 
    - ['RandomVerticalFlip', 0.5]
    - ['RandomResizedCrop', [256, 256], [0.75, 1.0], [0.75, 1.3333333333333333]]
    - ['RandomRotation', [-15, 15]]
    - ['ToTensor']
  VAL_TRANSFORM: 
    - ['ToTensor']

RANDOM_SAMPLE:
  NUMS_POINT: 20
  # SAMPLE_PROB: 0.5 # prob of strategy 1, prob for strategy 2 equal `1-p`
  # STRATEGY_1_MARGIN_INTERVAL: [0.05, 0.5]
  # STRATEGY_2_MARGIN_INTERVAL: [0.5, 0.8]
  D_STEP: 10
  D_MARGIN: 5
  SAMPLE_METHODS: ['adaptive_dmargin', 'adaptive_dstep'] #["adaptive_dstep", "adaptive_dmargin"] # "random_sample"
  DMARGIN_INTERVAL: [0.05, 0.5] #[0.1, 0.5]
  DSTEP_INTERVAL: [0.5, 0.8] #[0.1, 0.5]

## loss function config
LOSS:
  LAMBDA_EMBEDDING: 1
  EMBEDDING_LOSS:
    PACKAGE: 'loss'
    LOSS:  'SISDLFEmbeddingLoss' # still need set EMBEDDING.WITH_MARGIN = False
    PARAMETERS: [0.256, 0] # dd, dv
    # LOSS: 'SISDMLEmbeddingLoss' # # still need set EMBEDDING.WITH_MARGIN = False
    # PARAMETERS: [5] # k 
    # LOSS:  'ECOISEmbeddingLoss' # still need set EMBEDDING.WITH_MARGIN = True
    # PARAMETERS: [1.0e-5] # lambda_smooth
  
  LAMBDA_CLASSIFIER: 1
  CLASSIFIER_LOSS:
    PACKAGE: 'torch.nn'
    LOSS: 'CrossEntropyLoss'
    PARAMETERS: [] # 

## optimizer
OPTIMIZER:
  OPTIMIZER_NAME: 'Adam'
  # params, lr=0.001, betas=(0.9, 0.999), eps=1e-08, weight_decay=0, amsgrad=False
  OPTIMIZER_PARAMS: [['backbone', 1.0e-6], 1.0e-4, [0.9, 0.999], 1.0e-08, 1.0e-5] # 'embedding', 1.0e-5
  USE_LR_SCHEDULER: False
  LR_SCHEDULER: 'StepLR'
  # step_size, gamma=0.1, last_epoch=-1, verbose=False
  LR_SCHEDULER_PARAMS: [20, 0.6] #[10, 0.8] #[30, 0.5]

## network config
NETWORK:
  ## network.backbone
  BACKBONE:
    BACKBONE_NAME: 'deeplabv3_resnet101' # 'fcn_resnet101'
    PRETRAINED: True
    REPLACE_BN_LAYER_TO_GN: False
    NUMS_CHANNEL_PER_GROUP_NORM: 32

  ## network.embedding
  EMBEDDING:
    # WITH_MARGIN: True
    WITH_MARGIN: False
    CONV_TYPE: 'DSConv'
    NORM_TYPE:  'IN' #'LN' #'GN'
    ACTIVATION_TYPE: 'ReLU'
    IN_CHANNELS: [256, 256]
    OUT_CHANNEL: 128
    NUMS_CHANNEL_PER_GROUP_NORM: 32
    EXTRA_1X1_CONV_FOR_LAST_LAYER: False

  ## network.visual_attention
  VISUAL_ATTENTION:
    CHANNEL_OF_PER_INTERACTIVATE_MAP: 1

    ## network.visual_attention.rnn_cells
    RNN_CELLS:
      IN_CHANNEL: 257  # 256+1
      HIDDEN_CHANNEL: 64
      NUMS_CONV_LSTM_LAYER: 2
      USE_BIAS: True

    ## network.visual_attention.foreground_convs
    FOREGROUND_CONVS:
      CONV_TYPE: 'DSConv'
      NORM_TYPE: 'IN' #'GN'
      ACTIVATION_TYPE: 'ReLU'
      IN_CHANNELS: [64, 128]
      OUT_CHANNEL: 1
      NUMS_CHANNEL_PER_GROUP_NORM: 32
      EXTRA_1X1_CONV_FOR_LAST_LAYER: False

    ## network.visual_attention.background_convs
    BCAKGROUND_CONVS:
      CONV_TYPE: 'DSConv'
      NORM_TYPE: 'IN' # 'LN' #'GN'
      ACTIVATION_TYPE: 'ReLU'
      IN_CHANNELS: [64, 64, 128]
      OUT_CHANNEL: 1
      NUMS_CHANNEL_PER_GROUP_NORM: 32
      EXTRA_1X1_CONV_FOR_LAST_LAYER: False

  ## network.dynamic_segmentation_head
  DYNAMIC_SEGMENTATION_HEAD:
    CONV_TYPE: 'DSConv'
    NORM_TYPE: 'IN' #'LN' #'GN'
    ACTIVATION_TYPE: 'ReLU'
    IN_CHANNELS: [128, 256, 128]
    OUT_CHANNEL: 1
    NUMS_CHANNEL_PER_GROUP_NORM: 32
    EXTRA_1X1_CONV_FOR_LAST_LAYER: False